#!/usr/bin/env python3
"""
Script to fix double-encoded Japanese characters in Java files.
This script specifically handles the Mojibake (文字化け) issue where Japanese
characters were encoded/decoded multiple times.
"""

import os
import re
import codecs
from pathlib import Path

def fix_mojibake_text(text):
    """Fix double-encoded Japanese characters"""
    
    # Common corrupted patterns and their correct Japanese equivalents
    mojibake_fixes = {
        # Jackson設定クラス
        'Jackson險ｭ螳壹け繝ｩ繧ｹ': 'Jackson設定クラス',
        '險ｭ螳壹け繝ｩ繧ｹ': '設定クラス',
        '險ｭ螳・': '設定',
        '險ｭ螳壽ｸ医∩': '設定済み',
        '險ｭ螳壹・': '設定の',
        '險ｭ螳壹ｒ': '設定を',
        '險ｭ螳壹☆': '設定す',
        '險ｭ螳壹＆': '設定さ',
        
        # JSON シリアライゼーション・デシリアライゼーション
        'JSON 繧ｷ繝ｪ繧｢繝ｩ繧､繧ｼ繝ｼ繧ｷ繝ｧ繝ｳ繝ｻ繝・す繝ｪ繧｢繝ｩ繧､繧ｼ繝ｼ繧ｷ繝ｧ繝ｳ': 'JSON シリアライゼーション・デシリアライゼーション',
        '繧ｷ繝ｪ繧｢繝ｩ繧､繧ｼ繝ｼ繧ｷ繝ｧ繝ｳ': 'シリアライゼーション',
        '繝・す繝ｪ繧｢繝ｩ繧､繧ｼ繝ｼ繧ｷ繝ｧ繝ｳ': 'デシリアライゼーション',
        
        # 管理します
        '邂｡逅・＠縺ｾ縺・': '管理します',
        '邂｡逅・＠縺ｾ縺・': '管理します',
        '邂｡逅・': '管理',
        '邂｡逅・・': '管理を',
        '邂｡逅・＠': '管理し',
        
        # システム
        '繧ｷ繧ｹ繝・Β': 'システム',
        '繧ｷ繧ｹ繝・Β縺ｮ': 'システムの',
        '繧ｷ繧ｹ繝・Β繧・': 'システムを',
        
        # エンティティ
        '繧ｨ繝ｳ繝・ぅ繝・ぅ': 'エンティティ',
        '繧ｨ繝ｳ繝・ぅ繝・ぅ縺ｮ': 'エンティティの',
        '繧ｨ繝ｳ繝・ぅ繝・ぅ繧・': 'エンティティを',
        
        # 監査ログ
        '逶｣譟ｻ繝ｭ繧ｰ': '監査ログ',
        '逶｣譟ｻ': '監査',
        
        # 重要な操作
        '驥崎ｦ√↑謫堺ｽ・': '重要な操作',
        '驥崎ｦ√↑': '重要な',
        '謫堺ｽ・': '操作',
        '謫堺ｽ懊ｒ': '操作を',
        
        # 記録します
        '險倬鹸縺励∪縺・': '記録します',
        '險倬鹸': '記録',
        
        # Java 8 時間API
        'Java 8 譎る俣API': 'Java 8 時間API',
        '譎る俣API': '時間API',
        '譎る俣': '時間',
        
        # サポート
        '繧ｵ繝昴・繝・': 'サポート',
        '繧ｵ繝昴・繝医・': 'サポートを',
        '繧ｵ繝昴・繝医☆': 'サポートす',
        
        # タイムスタンプ
        '繧ｿ繧､繝繧ｹ繧ｿ繝ｳ繝・': 'タイムスタンプ',
        '繧ｿ繧､繝繧ｹ繧ｿ繝ｳ繝励ｒ': 'タイムスタンプを',
        
        # 無効化
        '辟｡蜉ｹ蛹・': '無効化',
        '辟｡蜉ｹ': '無効',
        
        # ISO-8601形式
        'ISO-8601蠖｢蠑・': 'ISO-8601形式',
        '蠖｢蠑・': '形式',
        
        # 使用します
        '菴ｿ逕ｨ縺励∪縺・': '使用します',
        '菴ｿ逕ｨ': '使用',
        '菴ｿ逕ｨ縺・': '使用し',
        '菴ｿ逕ｨ縺・繧・': '使用する',
        
        # null フィールド
        'null繝輔ぅ繝ｼ繝ｫ繝・': 'null フィールド',
        '繝輔ぅ繝ｼ繝ｫ繝・': 'フィールド',
        '繝輔ぅ繝ｼ繝ｫ繝峨ｒ': 'フィールドを',
        
        # 除外
        '髯､螟・': '除外',
        '髯､螟・・': '除外を',
        '髯､螟・☆': '除外す',
        
        # Spring Security
        'Spring Security險ｭ螳壹け繝ｩ繧ｹ': 'Spring Security設定クラス',
        'Spring Security': 'Spring Security',
        
        # JWT認証
        'JWT隱崎ｨｼ': 'JWT認証',
        '隱崎ｨｼ': '認証',
        '隱崎ｨｼ縲・': '認証、',
        '隱崎ｨｼ縺・': '認証が',
        '隱崎ｨｼ縺悟ｿ・ｦ・': '認証が必要',
        
        # CORS
        'CORS縲・': 'CORS、',
        'CORS險ｭ螳・': 'CORS設定',
        
        # セキュリティ
        '繧ｻ繧ｭ繝･繝ｪ繝・ぅ': 'セキュリティ',
        '繧ｻ繧ｭ繝･繝ｪ繝・ぅ繝倥ャ繝繝ｼ': 'セキュリティヘッダー',
        '繧ｻ繧ｭ繝･繝ｪ繝・ぅ繝輔ぅ繝ｫ繧ｿ繝ｼ': 'セキュリティフィルター',
        '繧ｻ繧ｭ繝･繝ｪ繝・ぅ繝輔ぅ繝ｫ繧ｿ繝ｼ繝√ぉ繝ｼ繝ｳ': 'セキュリティフィルターチェーン',
        
        # パスワード
        '繝代せ繝ｯ繝ｼ繝・': 'パスワード',
        '繝代せ繝ｯ繝ｼ繝峨ｒ': 'パスワードを',
        '繝代せ繝ｯ繝ｼ繝峨お繝ｳ繧ｳ繝ｼ繝繝ｼ': 'パスワードエンコーダー',
        
        # ハッシュ化
        '繝上ャ繧ｷ繝･蛹・': 'ハッシュ化',
        '繝上ャ繧ｷ繝･': 'ハッシュ',
        
        # 認証マネージャー
        '隱崎ｨｼ繝槭ロ繝ｼ繧ｸ繝｣繝ｼ': '認証マネージャー',
        '繝槭ロ繝ｼ繧ｸ繝｣繝ｼ': 'マネージャー',
        
        # プロバイダー
        '繝励Ο繝舌う繝繝ｼ': 'プロバイダー',
        '繝励Ο繝舌う繝繝ｼ繧・': 'プロバイダーを',
        '繝励Ο繝舌う繝繝ｼ險ｭ螳・': 'プロバイダー設定',
        
        # 許可する
        '險ｱ蜿ｯ縺・': '許可す',
        '險ｱ蜿ｯ': '許可',
        
        # オリジン
        '繧ｪ繝ｪ繧ｸ繝ｳ': 'オリジン',
        
        # 開発サーバー
        '髢狗匱繧ｵ繝ｼ繝・': '開発サーバー',
        '髢狗匱': '開発',
        '繧ｵ繝ｼ繝・': 'サーバー',
        
        # HTTP メソッド
        'HTTP繝｡繧ｽ繝・ラ': 'HTTP メソッド',
        '繝｡繧ｽ繝・ラ': 'メソッド',
        
        # ヘッダー
        '繝倥ャ繝繝ｼ': 'ヘッダー',
        '繝倥ャ繝繝ｼ繧・': 'ヘッダーを',
        
        # 認証情報
        '隱崎ｨｼ諠・ｱ': '認証情報',
        '諠・ｱ': '情報',
        '諠・ｱ縺ｮ': '情報の',
        
        # 送信
        '騾∽ｿ｡': '送信',
        '騾∽ｿ｡繧・': '送信を',
        
        # プリフライト
        '繝励Μ繝輔Λ繧､繝・': 'プリフライト',
        '繝励Μ繝輔Λ繧､繝医Μ繧ｯ繧ｨ繧ｹ繝・': 'プリフライトリクエスト',
        
        # リクエスト
        '繝ｪ繧ｯ繧ｨ繧ｹ繝・': 'リクエスト',
        '繝ｪ繧ｯ繧ｨ繧ｹ繝医・': 'リクエストの',
        '繝ｪ繧ｯ繧ｨ繧ｹ繝医ｒ': 'リクエストを',
        
        # キャッシュ
        '繧ｭ繝｣繝・す繝・': 'キャッシュ',
        '繧ｭ繝｣繝・す繝･': 'キャッシュ',
        '繧ｭ繝｣繝・す繝･譎る俣': 'キャッシュ時間',
        
        # 公開する
        '蜈ｬ髢・': '公開',
        '蜈ｬ髢九☆': '公開す',
        '蜈ｬ髢九＆': '公開さ',
        
        # レスポンス
        '繝ｬ繧ｹ繝昴Φ繧ｹ': 'レスポンス',
        '繝ｬ繧ｹ繝昴Φ繧ｹ繝倥ャ繝繝ｼ': 'レスポンスヘッダー',
        
        # CSRF
        'CSRF辟｡蜉ｹ蛹・': 'CSRF無効化',
        'CSRF': 'CSRF',
        
        # JWT使用
        'JWT菴ｿ逕ｨ縺ｮ縺溘ａ': 'JWT使用のため',
        '縺溘ａ': 'ため',
        
        # セッション
        '繧ｻ繝・す繝ｧ繝ｳ': 'セッション',
        '繧ｻ繝・す繝ｧ繝ｳ邂｡逅・': 'セッション管理',
        '繧ｻ繝・す繝ｧ繝ｳ繧・': 'セッションを',
        
        # ステートレス
        '繧ｹ繝・・繝医Ξ繧ｹ': 'ステートレス',
        
        # エントリーポイント
        '繧ｨ繝ｳ繝医Μ繝ｼ繝昴う繝ｳ繝・': 'エントリーポイント',
        '繧ｨ繝ｳ繝医Μ繝ｼ繝昴う繝ｳ繝郁ｨｭ螳・': 'エントリーポイント設定',
        
        # 認可設定
        '隱榊庄險ｭ螳・': '認可設定',
        '隱榊庄': '認可',
        
        # パブリック
        '繝代ヶ繝ｪ繝・け': 'パブリック',
        '繝代ヶ繝ｪ繝・け繧ｨ繝ｳ繝峨・繧､繝ｳ繝・': 'パブリックエンドポイント',
        
        # エンドポイント
        '繧ｨ繝ｳ繝峠・繧､繝ｳ繝・': 'エンドポイント',
        '繧ｨ繝ｳ繝峠・繧､繝ｳ繝医・': 'エンドポイントの',
        '繧ｨ繝ｳ繝峠・繧､繝ｳ繝医ｒ': 'エンドポイントを',
        
        # 認証不要
        '隱崎ｨｼ荳崎ｦ・': '認証不要',
        '荳崎ｦ・': '不要',
        
        # ヘルスチェック
        '繝倥Ν繧ｹ繝√ぉ繝・け': 'ヘルスチェック',
        '繝倥Ν繧ｹ繝√ぉ繝・け繝ｻ逶｣隕悶お繝ｳ繝峠・繧､繝ｳ繝・': 'ヘルスチェック・監視エンドポイント',
        
        # 監視
        '逶｣隕・': '監視',
        
        # API文書化
        'API譁・嶌蛹・': 'API文書化',
        '譁・嶌蛹・': '文書化',
        
        # 静的リソース
        '髱咏噪繝ｪ繧ｽ繝ｼ繧ｹ': '静的リソース',
        '髱咏噪': '静的',
        '繝ｪ繧ｽ繝ｼ繧ｹ': 'リソース',
        
        # 読み取り専用
        '隱ｭ縺ｿ蜿悶ｊ蟆ら畑': '読み取り専用',
        '隱ｭ縺ｿ蜿悶ｊ': '読み取り',
        '蟆ら畑': '専用',
        
        # 管理者専用
        '邂｡逅・・ｰら畑': '管理者専用',
        '邂｡逅・・': '管理者',
        
        # ビジネスユーザー
        '繝薙ず繝阪せ繝ｦ繝ｼ繧ｶ繝ｼ': 'ビジネスユーザー',
        '繝薙ず繝阪せ': 'ビジネス',
        '繝ｦ繝ｼ繧ｶ繝ｼ': 'ユーザー',
        
        # 以上が必要
        '莉･荳翫′蠢・ｦ・': '以上が必要',
        '莉･荳・': '以上',
        '蠢・ｦ・': '必要',
        
        # その他すべて
        '縺昴・莉・': 'その他',
        '縺昴・莉悶☆縺ｹ縺ｦ': 'その他すべて',
        '縺昴・莉悶☆縺ｹ縺ｦ縺ｮ': 'その他すべての',
        
        # 必要
        '蠢・ｦ・': '必要',
        '蠢・ｦ√↑': '必要な',
        
        # 追加
        '霑ｽ蜉・': '追加',
        '霑ｽ蜉帛燕': '追加前',
        '霑ｽ蜉帛ｾ・': '追加後',
        
        # フィルター
        '繝輔ぅ繝ｫ繧ｿ繝ｼ': 'フィルター',
        '繝輔ぅ繝ｫ繧ｿ繝ｼ繧・': 'フィルターを',
        '繝輔ぅ繝ｫ繧ｿ繝ｼ繝√ぉ繝ｼ繝ｳ': 'フィルターチェーン',
        
        # コメント
        '繧ｳ繝｡繝ｳ繝・': 'コメント',
        '繧ｳ繝｡繝ｳ繝医お繝ｳ繝・ぅ繝・ぅ': 'コメントエンティティ',
        
        # フォーラム
        '繝輔か繝ｼ繝ｩ繝・': 'フォーラム',
        '繝輔か繝ｼ繝ｩ繝謚慕ｨｿ': 'フォーラム投稿',
        
        # 投稿
        '謚慕ｨｿ': '投稿',
        '謚慕ｨｿ縺ｮ': '投稿の',
        
        # 情報
        '諠・ｱ': '情報',
        '諠・ｱ繧・': '情報を',
        
        # テスト
        '繝・せ繝・': 'テスト',
        '繝・せ繝医・': 'テストの',
        '繝・せ繝育畑': 'テスト用',
        
        # イベント
        '繧､繝吶Φ繝・': 'イベント',
        '繧､繝吶Φ繝医・': 'イベントの',
        '繧､繝吶Φ繝医ｒ': 'イベントを',
        
        # 基本情報
        '蝓ｺ譛ｬ諠・ｱ': '基本情報',
        '蝓ｺ譛ｬ': '基本',
        
        # 正しく
        '豁｣縺励￥': '正しく',
        '豁｣縺・': '正し',
        
        # 設定される
        '險ｭ螳壹＆繧後ｋ': '設定される',
        '險ｭ螳壹＆繧・': '設定さ',
        
        # デフォルト値
        '繝・ヵ繧ｩ繝ｫ繝亥､': 'デフォルト値',
        '繝・ヵ繧ｩ繝ｫ繝・': 'デフォルト',
        
        # 値
        '蛟､': '値',
        '蛟､縺・': '値が',
        '蛟､繧・': '値を',
        
        # 正しく
        '豁｣縺励￥': '正しく',
        
        # 判定する
        '蛻､螳壹☆繧・': '判定する',
        '蛻､螳・': '判定',
        
        # アクティブ
        '繧｢繧ｯ繝・ぅ繝・': 'アクティブ',
        '繧｢繧ｯ繝・ぅ繝悶↑': 'アクティブな',
        
        # ユーザー
        '繝ｦ繝ｼ繧ｶ繝ｼ': 'ユーザー',
        '繝ｦ繝ｼ繧ｶ繝ｼ縺・': 'ユーザーが',
        '繝ｦ繝ｼ繧ｶ繝ｼ繧・': 'ユーザーを',
        
        # 削除済み
        '蜑企勁貂医∩': '削除済み',
        '蜑企勁': '削除',
        
        # ではない
        '縺ｧ縺ｯ縺ｪ縺・': 'ではない',
        '縺ｧ縺ｯ縺ｪ縺・': 'ではな',
        
        # 停止中
        '蛛懈ｭ｢荳ｭ': '停止中',
        '蛛懈ｭ｢': '停止',
        
        # 特定の権限
        '迚ｹ螳壹・讓ｩ髯・': '特定の権限',
        '迚ｹ螳・': '特定',
        '讓ｩ髯・': '権限',
        
        # 持っている
        '謖√▲縺ｦ縺・ｋ': '持っている',
        '謖√▲縺ｦ': '持って',
        
        # かどうか
        '縺九←縺・°': 'かどうか',
        
        # 管理者権限
        '邂｡逅・・ｨｩ髯・': '管理者権限',
        
        # ビジネス権限
        '繝薙ず繝阪せ讓ｩ髯・': 'ビジネス権限',
        
        # も持つ
        '繧ゆｽ√▽': 'も持つ',
        
        # ソフトデリート
        '繧ｽ繝輔ヨ繝・Μ繝ｼ繝・': 'ソフトデリート',
        '繧ｽ繝輔ヨ': 'ソフト',
        '繝・Μ繝ｼ繝・': 'デリート',
        
        # 実行される
        '螳溯｡後＆繧後ｋ': '実行される',
        '螳溯｡・': '実行',
        
        # 文字・時間関連
        '譎る俣': '時間',
        '譁・ｭ・': '文字',
        '蟷ｴ': '年',
        '譌・': '日',
        
        # その他の一般的な変換
        '縺ｧ縺・': 'です',
        '縺励∪縺・': 'します',
        '縺ｧ縺阪ｋ': 'できる',
        '縺ｧ縺阪∪縺・': 'できます',
        '縺ｧ縺阪↑縺・': 'できない',
        '縺ｧ縺阪∪縺帙ｓ': 'できません',
        '縺ｧ縺吶・': 'です。',
        '縺励∪縺吶・': 'します。',
        '縺ｧ縺阪∪縺吶・': 'できます。',
        '縺ｧ縺阪∪縺帙ｓ縺・': 'できません。',
        
        # 一般的な記号・助詞
        '繧・': 'を',
        '縺・': 'が',
        '縺ｫ': 'に',
        '縺ｨ': 'と',
        '縺ｯ': 'は',
        '縺ｮ': 'の',
        '縺ｧ': 'で',
        '縺薙・': 'この',
        '縺昴・': 'その',
        '縺ゅ・': 'あの',
        '縺薙ｌ': 'これ',
        '縺昴ｌ': 'それ',
        '縺ゅｌ': 'あれ',
        
        # 改行・句読点
        '縺・': '。',
        '縲・': '、',
        
        # 英数字の修正
        'ーxception': 'Exception',
        'ーvent': 'Event',
        'ーntity': 'Entity',
        'ーnumerated': 'Enumerated',
        'ーnumType': 'EnumType',
        'ーntityListeners': 'EntityListeners',
        'ーntityListener': 'EntityListener',
        'ーnableWebSecurity': 'EnableWebSecurity',
        'ーnableMethodSecurity': 'EnableMethodSecurity',
        'ーnabled': 'Enabled',
        'ーncoder': 'Encoder',
        'ーncoding': 'Encoding',
        'ーqualTo': 'EqualTo',
        'ーmail': 'Email',
        'ーxactly': 'Exactly',
        'ーxposed': 'Exposed',
        'ーxpected': 'Expected',
        'ーach': 'Each',
        'ーndTime': 'EndTime',
        'ーntryPoint': 'EntryPoint',
        'ーvery': 'Every',
        'ーvents': 'Events',
        
        # GET/POST等のHTTPメソッド
        'GーT': 'GET',
        'POST': 'POST',
        'PUT': 'PUT',
        'PATCH': 'PATCH',
        'DーLーTー': 'DELETE',
        'OPTIONS': 'OPTIONS',
        
        # その他の定数
        'TRUー': 'TRUE',
        'FALSー': 'FALSE',
        'NULL': 'NULL',
        'ZーRO': 'ZERO',
        'ACTIVー': 'ACTIVE',
        'USーR': 'USER',
        'ADMIN': 'ADMIN',
        'BUSINーSS': 'BUSINESS',
        'SUPーR_ADMIN': 'SUPER_ADMIN',
        'PーNDING_VーRIFICATION': 'PENDING_VERIFICATION',
        'SUSPーNDーD': 'SUSPENDED',
        'DーLーTーD': 'DELETED',
        'PUBLISHーD': 'PUBLISHED',
        'HIDDーN': 'HIDDEN',
        'DRAFT': 'DRAFT',
        'SOLD_OUT': 'SOLD_OUT',
        'CULTURAL': 'CULTURAL',
        'OTHーR': 'OTHER',
        'SNAKー_CASー': 'SNAKE_CASE',
        'WRITー_DATーS_AS_TIMーSTAMPS': 'WRITE_DATES_AS_TIMESTAMPS',
        'STATーLーSS': 'STATELESS',
        'TーXT': 'TEXT',
        
        # 濁点・半濁点の修正
        'ーー': 'ー',
        '縺ｫ': 'に',
        '縺ｧ': 'で',
        '縺ｮ': 'の',
        '縺ｯ': 'は',
        '縺ｾ': 'ま',
        '縺ｿ': 'み',
        '縺ｦ': 'て',
        '縺ｧ': 'で',
        '縺ｼ': 'ぼ',
        '縺ｰ': 'ば',
        '縺ｪ': 'な',
        '縺ｊ': 'り',
        '縺ｮ': 'の',
        '縺ｮ': 'の',
    }
    
    # Apply the fixes
    fixed_text = text
    for corrupted, correct in mojibake_fixes.items():
        fixed_text = fixed_text.replace(corrupted, correct)
    
    return fixed_text

def fix_java_file(file_path):
    """Fix mojibake in a Java file"""
    try:
        # Read the file
        with open(file_path, 'r', encoding='utf-8') as f:
            content = f.read()
        
        # Fix mojibake
        fixed_content = fix_mojibake_text(content)
        
        # Only write if content changed
        if fixed_content != content:
            with open(file_path, 'w', encoding='utf-8') as f:
                f.write(fixed_content)
            print(f"Fixed: {file_path}")
            return True
        else:
            print(f"No changes needed: {file_path}")
            return False
            
    except Exception as e:
        print(f"Error fixing {file_path}: {e}")
        return False

def main():
    """Main function to process all Java files"""
    root_dir = Path(__file__).parent
    java_files = list(root_dir.rglob("*.java"))
    
    print(f"Found {len(java_files)} Java files to process")
    
    success_count = 0
    for java_file in java_files:
        if fix_java_file(java_file):
            success_count += 1
    
    print(f"\nFixed {success_count}/{len(java_files)} files")

if __name__ == "__main__":
    main()